<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>com.qingfeng</artifactId>
        <groupId>com.qingfeng</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>com.qingfeng-thymeleaf</artifactId>

    <name>com.qingfeng-thymeleaf</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <dependencies>
        <!--引入Swagger3依赖-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-test</artifactId>
            <version>2.3.1.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>complie</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.15</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml-schemas</artifactId>
            <version>3.15</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>3.15</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-scratchpad</artifactId>
            <version>3.15</version>
        </dependency>
        <dependency>
            <groupId>fr.opensagres.xdocreport</groupId>
            <artifactId>org.apache.poi.xwpf.converter.xhtml</artifactId>
            <version>1.0.6</version>
        </dependency>

        <dependency>
            <groupId>com.commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.2.2</version>
        </dependency>

        <dependency>
            <groupId>com.qingfeng</groupId>
            <artifactId>com.qingfeng-system</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.3.7</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <!-- proguard混淆插件-->
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.2.0</version>
                <executions>
                    <execution>
                        <!-- 打包的时候开始混淆-->
                        <phase>package</phase>
                        <goals>
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <injar>${project.build.finalName}.jar</injar>
                    <!--输出的jar-->
                    <outjar>${project.build.finalName}.jar</outjar>
                    <!-- 是否混淆-->
                    <obfuscate>true</obfuscate>
                    <options>
                        <option>-target 1.8</option> <!--指定java版本号-->
                        <option>-dontshrink</option> <!--默认开启，不做收缩（删除注释、未被引用代码）-->
                        <option>-dontoptimize</option><!--默认是开启的，这里关闭字节码级别的优化-->
                        <!-- 不路过非公用类文件及成员-->
                        <option>-dontskipnonpubliclibraryclasses</option>
                        <option>-dontskipnonpubliclibraryclassmembers</option>
                        <!--不用大小写混合类名机制-->
                        <option>-dontusemixedcaseclassnames</option>
                        <!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
                        <option>-allowaccessmodification</option>
                        <!-- 确定统一的混淆类的成员名称来增加混淆-->
                        <option>-useuniqueclassmembernames</option>
                        <!-- 不混淆所有包名-->
                        <!--<option>-keeppackagenames</option>-->

                        <option>-adaptclassstrings</option><!--混淆类名之后，对使用Class.forName('className')之类的地方进行相应替代-->
                        <option>-ignorewarnings
                        </option><!-- 忽略warn消息,如果提示org.apache.http.* 这个包里的类有问题，那么就加入下述代码：-keep class org.apache.http.** { *; }    -dontwarn org.apache.http.**-->
                        <option>-keep class org.apache.logging.log4j.util.* { *; }</option>
                        <option>-dontwarn org.apache.logging.log4j.util.**</option>
                        <option>-keepattributes
                            Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,EnclosingMethod
                        </option><!--对异常、注解信息在runtime予以保留，不然影响springboot启动-->
                        <!--不混淆所有interface接口-->
                        <!--                        <option>-keepnames interface **</option>-->
                        <option>-keepclassmembers enum * { *; }</option><!--保留枚举成员及方法-->
                        <option>-keepparameternames</option>
                        <option>-keepclasseswithmembers public class * {
                            public static void main(java.lang.String[]);}
                        </option> <!--保留main方法的类及其方法名-->
                        <!--忽略note消息，如果提示javax.annotation有问题，那麽就加入以下代码-->
                        <option>-dontnote javax.annotation.**</option>
                        <option>-dontnote sun.applet.**</option>
                        <option>-dontnote sun.tools.jar.**</option>
                        <option>-dontnote org.apache.commons.logging.**</option>
                        <option>-dontnote javax.inject.**</option>
                        <option>-dontnote org.aopalliance.intercept.**</option>
                        <option>-dontnote org.aopalliance.aop.**</option>
                        <option>-dontnote org.apache.logging.log4j.**</option>

                        <!--  ##### 以下为需要根据项目情况修改 comment by 青锋  ##### -->
                        <!--入口程序类不能混淆，混淆会导致springboot启动不了-->
                        <option>-keep class com.qingfeng.Application</option>
                        <option>-keep class com.qingfeng.framework.**.* {*;}</option>
                        <option>-keep class com.qingfeng.quartz.**.* {*;}</option>
<!--                        <option>-keep class com.qingfeng.system.entity.* {*;}</option>-->
<!--                        <option>-keep class com.qingfeng.system.model.* {*;}</option>-->
<!--                        <option>-keep class com.qingfeng.system.controller.* {*;}</option>-->
                        <!--  ##### 以上为需要根据项目情况修改  comment by qingfeng ##### -->

                        <option>-keep interface * extends * { *; }</option>
                        <!--不混淆所有类,保存原始定义的注释-->
                        <option>-keepclassmembers class * {
                            @org.springframework.beans.factory.annotation.Autowired *;
                            @org.springframework.beans.factory.annotation.Value *;
                            }
                        </option>
                    </options>
                    <libs>
                        <!-- 添加依赖 java8-->
                        <lib>${java.home}/lib/rt.jar</lib>
                        <lib>${java.home}/lib/jce.jar</lib>
                    </libs>
                </configuration>
                <dependencies>
                    <!-- https://mvnrepository.com/artifact/net.sf.proguard/proguard-base -->
                    <dependency>
                        <groupId>net.sf.proguard</groupId>
                        <artifactId>proguard-base</artifactId>
                        <version>6.1.1</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!--Springboot repackage 打包-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- spingboot 打包需要repackage否则不是可执行jar -->
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <mainClass>com.qingfeng.Application</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>



<!--            &lt;!&ndash; ProGuard混淆插件&ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>com.github.wvengen</groupId>-->
<!--                <artifactId>proguard-maven-plugin</artifactId>-->
<!--                <version>2.0.11</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        &lt;!&ndash; 混淆时刻，这里是打包的时候混淆&ndash;&gt;-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            &lt;!&ndash; 使用插件的什么功能，当然是混淆&ndash;&gt;-->
<!--                            <goal>proguard</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash; 是否将生成的PG文件安装部署&ndash;&gt;-->
<!--                    <attach>true</attach>-->
<!--                    &lt;!&ndash; 是否混淆&ndash;&gt;-->
<!--                    <obfuscate>true</obfuscate>-->
<!--                    &lt;!&ndash; 指定生成文件分类 &ndash;&gt;-->
<!--                    <attachArtifactClassifier>pg</attachArtifactClassifier>-->
<!--                    <options>-->
<!--                        &lt;!&ndash; JDK目标版本1.8&ndash;&gt;-->
<!--                        <option>-target 1.8</option>-->
<!--                        &lt;!&ndash; 不做收缩（删除注释、未被引用代码）&ndash;&gt;-->
<!--                        <option>-dontshrink</option>-->
<!--                        &lt;!&ndash; 不做优化（变更代码实现逻辑）&ndash;&gt;-->
<!--                        <option>-dontoptimize</option>-->
<!--                        &lt;!&ndash; 不路过非公用类文件及成员&ndash;&gt;-->
<!--                        <option>-dontskipnonpubliclibraryclasses</option>-->
<!--                        <option>-dontskipnonpubliclibraryclassmembers</option>-->
<!--                        &lt;!&ndash;不用大小写混合类名机制&ndash;&gt;-->
<!--                        <option>-dontusemixedcaseclassnames</option>-->
<!--                        &lt;!&ndash; 优化时允许访问并修改有修饰符的类和类的成员 &ndash;&gt;-->
<!--                        <option>-allowaccessmodification</option>-->
<!--                        &lt;!&ndash; 确定统一的混淆类的成员名称来增加混淆&ndash;&gt;-->
<!--                        <option>-useuniqueclassmembernames</option>-->
<!--                        &lt;!&ndash; 不混淆所有包名&ndash;&gt;-->
<!--                        &lt;!&ndash;<option>-keeppackagenames</option>&ndash;&gt;-->
<!--                        &lt;!&ndash; 需要保持的属性：异常，注解等&ndash;&gt;-->
<!--                        <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>-->
<!--                        &lt;!&ndash; 不混淆所有的set/get方法&ndash;&gt;-->
<!--                        &lt;!&ndash;<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>&ndash;&gt;-->
<!--                        &lt;!&ndash; 不混淆包下的所有类名，且类中的方法也不混淆&ndash;&gt;-->
<!--                        <option>-keep class com.qingfeng.Application</option>-->
<!--                        <option>-keep class com.qingfeng.base.* {*;}</option>-->
<!--                        <option>-keep class com.qingfeng.system.entity.* {*;}</option>-->
<!--                        <option>-keep class com.qingfeng.system.model.* {*;}</option>-->
<!--                        <option>-keep class com.qingfeng.system.controller.* {*;}</option>-->
<!--                    </options>-->
<!--                    &lt;!&ndash;class 混淆后输出的jar包&ndash;&gt;-->
<!--                    <outjar>classes-autotest.jar</outjar>-->
<!--                    &lt;!&ndash; 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 &ndash;&gt;-->
<!--                    <libs>-->
<!--                        <lib>${java.home}/lib/rt.jar</lib>-->
<!--                    </libs>-->
<!--                    &lt;!&ndash; 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧&ndash;&gt;-->
<!--                    <injar>classes</injar>-->
<!--                    &lt;!&ndash; 输出目录&ndash;&gt;-->
<!--                    <outputDirectory>${project.build.directory}</outputDirectory>-->
<!--                </configuration>-->
<!--            </plugin>-->

        </plugins>
    </build>

</project>
